class Pet : IInitialise, IUpdatable, IDrawable
    {

        public bool nameSet = false;
        public bool petBought = false;

        public string Name { get; set; }

        //Health
        protected double maxHealth = 100;
        protected double currentHealth;
        protected double startHealth = 100;

        //Hunger
        protected double noHunger = 0;
        protected double currentHunger;
        protected double startHunger = 20;

        //Happiness
        protected double maxHappiness = 100;
        protected double startHappiness = 70;
        protected double currentHappiness;

        //Pets attributes
        protected double petsPreferedTemperature;

        public static List<Item> Inventory = new List<Item>();


        public void Initialise()
        {
            currentHealth = startHealth;
            currentHappiness = startHappiness;
            currentHunger = startHunger;
        }

        public void Update()
        {
            HappinessUpdate();
            HungerUpdate();
            TemperatureEffectPet();

            if(currentHappiness < 30)
                HurtingHealth();
            if (currentHunger > 40)
                HurtingHealth();

            if (currentHunger == 0 || currentHappiness == 0)
            {
                currentHunger = 0;
                currentHappiness = 0;
                currentHealth -= 2;
            }
        }

        public virtual void Display()
        {
            DisplayingHealth();
            DisplayingHappiness();
            DisplayHunger();
            DisplayDogFace();
            DisplayPetDetails();
            DisplayInventory();
            ShopKey();
            DisplayPreferredTemp();

            if (currentHealth <= 0)
                DEAD();
        }

        #region Interacting
        public void Eat(Food food)  
        {
            if ((currentHealth += food.healthRestoreValue) > 100)
                currentHealth = 100;
            else
            {
                currentHealth += food.healthRestoreValue;
            }

            if ((currentHunger - food.hungerDecreaseValue) < 0)
                currentHunger = 0;
            else
            {
                currentHunger -= food.hungerDecreaseValue;
            }
        }

        public void Play(Toy toy)
        {
            if ((currentHappiness += toy.happinessIncreaseValue) > 100)
                currentHappiness = 100;
            else
            {
                currentHappiness += toy.happinessIncreaseValue;
            }
        }

        public void TakeMedicine(Medicine medicine)
        {
            if ((currentHealth += medicine.healthRestoreValue) > 100)
                currentHealth = 100;
            else
            {
                currentHealth += medicine.healthRestoreValue;
            }
        }
        #endregion

        #region Use Inventory
        public void UseInventory()
        {
            short curItem = 0, c = 0;
            int y = 25;
            int x = 54;
            bool doneSelection = false;

            do
            {
                Console.Clear();
                InventoryMessages();
                y = 25;
                c = 0;

                foreach (Item item in Inventory)
                {
                    if (curItem == c)
                    {
                        Console.ForegroundColor = ConsoleColor.White;
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                    }

                    Console.SetCursorPosition(x, y);
                    item.Display();

                    y++;
                    c++;
                }

                switch (Console.ReadKey(true).Key)
                {
                    case ConsoleKey.UpArrow:
                        curItem--;
                        if (curItem < 0) curItem = Convert.ToInt16(Inventory.Count() - 1);
                        break;

                    case ConsoleKey.DownArrow:
                        curItem++;
                        if (curItem > Inventory.Count() - 1) curItem = 0;
                        break;

                    case ConsoleKey.Enter:

                        if (Inventory.Count() == 0)
                        {
                            NothingInInventory();
                        }
                        else
                        {

                            if (Inventory[curItem].GetType() == typeof(Food))
                                Eat(((Food)Inventory[curItem]));

                            if (Inventory[curItem].GetType() == typeof(Toy))
                                Play(((Toy)Inventory[curItem]));

                            if (Inventory[curItem].GetType() == typeof(Medicine))
                                TakeMedicine(((Medicine)Inventory[curItem]));

                            Inventory.Remove(Inventory[curItem]);
                        }
                        break;

                    case ConsoleKey.Escape:
                        Console.Clear();
                        Console.SetCursorPosition(75, 24);
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.Write("Press again to confirm");
                        doneSelection = true;
                        break;
                }
            } while (doneSelection != true);
        }

        public void NothingInInventory()
        {
            bool done = false;
            do
            {
                Console.SetCursorPosition(70, 24);
                Console.Write("You have no items in your inventory");

                switch (Console.ReadKey(true).Key)
                {
                    case ConsoleKey.Enter:
                        done = true;
                        break;
                }
            }
            while (done != true);
        }
        #endregion

        #region Inventory Navigation
        public void InventoryMessages()
        {
            int y = 20;
            int x = 77;

            Console.SetCursorPosition(x, y);
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write("Your pets Inventory");
        }
        #endregion

        #region Dead Method
        public void DEAD()
        {
            Console.Clear();

            bool reset = false;
            string deadDog = "deadDog.txt";
            string deadFish = "deadFish.txt";
            string file = "";

            Console.SetCursorPosition(60, 1);
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write("Oh No!! Your pet died.... Press R to start again");

            if (petSelected == "Dog")
                file = deadDog;
            if (petSelected == "Fish")
                file = deadFish;


            do
            {
                string[] lines = System.IO.File.ReadAllLines(file);

                int x = 36;
                int y = 7;

                foreach (string line in lines)
                {
                    Console.SetCursorPosition(x, y);
                    Console.ForegroundColor = ConsoleColor.White;

                    Console.WriteLine("\t" + line);

                    y++;
                }

                switch (Console.ReadKey(true).Key)
                {
                    case ConsoleKey.R:
                        var fileName = Assembly.GetExecutingAssembly().Location;
                        System.Diagnostics.Process.Start(fileName);
                        Environment.Exit(0);
                        break;
                }
            }
            while (reset != true);
        }
        #endregion

        #region Display Inventory on UI
        public void DisplayInventory()
        {
            int x = 3;
            int y = 21;
            
            foreach (var items in Inventory)
            {
                Console.ForegroundColor = ConsoleColor.White;
                Console.SetCursorPosition(x, y);
                items.DisplaySpecificItem();
                y++;
            }
        }
        #endregion

        #region Show access shop key and inventory title
        public void ShopKey()
        {
            Console.SetCursorPosition(3,18);
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write("Press S to view shop");

            Console.SetCursorPosition(3, 20);
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("Inventory: ");
        }
        #endregion

        #region Selecting Pet
        public string petSelected;

        public void SelectingPet()
        {
            bool doneSelection = false;
            short curItem = 0, c;

            string[] pets = { "Dog", "Fish" };

            Console.SetCursorPosition(79, 18);
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write("Select a pet");

            do
            {
                int x = 83;
                int y = 20;
                Console.SetCursorPosition(x, y);

                for (c = 0; c < pets.Length; c++)
                {
                    Console.SetCursorPosition(x, y);

                    if (curItem == c)
                    {

                        Console.ForegroundColor = ConsoleColor.White;
                        Console.WriteLine(pets[c]);
                        petSelected = pets[c];

                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                        Console.WriteLine(pets[c]);
                    }
                    y++;
                }

                switch (Console.ReadKey(true).Key)
                {
                    case ConsoleKey.DownArrow:
                        curItem++;
                        if (curItem > pets.Length - 1) curItem = 0;
                        break;

                    case ConsoleKey.UpArrow:
                        curItem--;
                        if (curItem < 0) curItem = Convert.ToInt16(pets.Length - 1);
                        break;

                    case ConsoleKey.Enter:
                        doneSelection = true;
                        break;
                }
            } while (doneSelection != true);
            Console.Clear();

            if (petSelected == "Dog")
            {
                petsPreferedTemperature = 18.00;
            }
            if (petSelected == "Fish")
            {
                petsPreferedTemperature = 25.00;
            }
        }
        #endregion

        #region Getting Pets Name
        bool done = false;

        public void GettingPetDetails()
        {
            do
            {
                Console.SetCursorPosition(62, 15);
                Console.ForegroundColor = ConsoleColor.White;
                Console.Write("Please enter the name you wish to give to your pet: ");
                Name = Console.ReadLine();

                if (Name != "")
                    done = true;
            }
            while (done != true);
            
        }
        #endregion

        #region Display Pets Details
        public void DisplayPetDetails()
        {

            Console.SetCursorPosition(3, 1);
            Console.Write("Name: " + Name);

            Console.SetCursorPosition(3, 3);
            Console.Write("Type: " + petSelected);
        }
        #endregion

        #region Defining Pets Preferred Temperature
        public void DefinePetsTemperature()
        {
            if (petSelected == "Dog")
            {
                petsPreferedTemperature = 18.00;
            }
            if (petSelected == "Fish")
            {
                petsPreferedTemperature = 25.00;
            }
        }

        public void TemperatureEffectPet()
        {
            if (petsPreferedTemperature >= (Room.roomTemperature - 2) && petsPreferedTemperature <= (Room.roomTemperature + 2))
                currentHappiness += 0.05;
            else
            {
                currentHappiness -= 0.06;
            }
        }

        public void DisplayPreferredTemp()
        {
            Console.SetCursorPosition(3, 12);
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write("Preferred Temperature: " + petsPreferedTemperature);
        }
        #endregion

        #region Display Health, Happiness, Hunger
        public void DisplayingHealth()
        {
            Console.SetCursorPosition(3, 6);

            if(currentHealth >= 70)
                Console.ForegroundColor = ConsoleColor.Red;
            else if (currentHealth < 70)
                Console.ForegroundColor = ConsoleColor.DarkRed;

            Console.Write("Current Health: " + currentHealth.ToString("0"));
                        
        }
        public void HurtingHealth()
        {
            currentHealth -= 0.075f;
        }



        public void DisplayingHappiness()
        {
            Console.SetCursorPosition(3, 8);

            if (currentHappiness >= 60)
                Console.ForegroundColor = ConsoleColor.Yellow;
            else if (currentHappiness < 30)
                Console.ForegroundColor = ConsoleColor.DarkYellow;

            Console.Write("Current Happiness: " + currentHappiness.ToString("0"));
        }
        public void HappinessUpdate()
        {
            if ((currentHappiness - 0.06f) < 0)
                currentHappiness = 0;
            else
            {
                currentHappiness -= 0.06f;
            }
        }

        public void DisplayHunger()
        {
            Console.SetCursorPosition(3, 10);

            if (currentHunger <= 50)
                Console.ForegroundColor = ConsoleColor.Green;
            else if (currentHunger > 40)
                Console.ForegroundColor = ConsoleColor.DarkGreen;

            Console.Write("Current Hunger: " + currentHunger.ToString("0"));
        }
        public void HungerUpdate()
        {
            if ((currentHunger += 0.06f) > 100)
                currentHunger = 100;
            else
            {
                currentHunger += 0.06f;
            }
        }
        #endregion

        #region Show Bought Items
        public void ShowBoughtItems()
        {
            int x = 1;
            int y = 1;

            Console.SetCursorPosition(x, y);

            foreach (var items in Inventory)
            {
                Console.Clear();
                Console.SetCursorPosition(1, 1);
                Console.Write(items);
                y++;
            }
        }
        #endregion

        #region Display Pet Artwork
        public void DisplayDogFace()
        {
            #region Dog Ascii Files
            string excitedDog = "excitedDog.txt";
            string happyDog = "happyDog.txt";
            string sadDog= "sadDog.txt";
            string poorlyDog = "poorlyDog.txt";
            string deadDog= "deadDog.txt";
            string defaultDog = "defaultDog.txt";
            #endregion

            #region Fish Ascii Files
            string excitedFish = "excitedFish.txt";
            string happyFish = "happyFish.txt";
            string sadFish = "sadFish.txt";
            string poorlyFish = "poorlyFish.txt";
            string deadFish = "deadFish.txt";
            #endregion


            string faceToLoad = defaultDog;
            int face = 0;

            if (currentHealth <= 100 && currentHealth >= 70)
                face = 1;
            else if (currentHealth <= 70 && currentHealth >= 50)
                face = 2;
            else if (currentHealth <= 50 && currentHealth >= 40)
                face = 3;
            else if (currentHealth <= 40 && currentHealth >= 1)
                face = 4;
            else if (currentHealth <= 0)
                face = 5;

            Console.SetCursorPosition(20, 20);
            switch (face)
            {
                case 0:
                    if(petSelected == "Dog")
                        faceToLoad = defaultDog;
                    break;
                case 1:
                    if (petSelected == "Dog")
                        faceToLoad = excitedDog;

                    if (petSelected == "Fish")
                        faceToLoad = excitedFish;
                    break;
                case 2:
                    if (petSelected == "Dog")
                        faceToLoad = happyDog;

                    if (petSelected == "Fish")
                        faceToLoad = happyFish;
                    break;

                case 3:
                    if (petSelected == "Dog")
                        faceToLoad = sadDog;

                    if (petSelected == "Fish")
                        faceToLoad = sadFish;
                    break;

                case 4:
                    if (petSelected == "Dog")
                        faceToLoad = poorlyDog;

                    if (petSelected == "Fish")
                        faceToLoad = poorlyFish;
                    break;

                case 5:
                    if (petSelected == "Dog")
                        faceToLoad = deadDog;

                    if (petSelected == "Fish")
                        faceToLoad = deadFish;
                    break;
            }

            string[] lines = System.IO.File.ReadAllLines(faceToLoad);

            int x = 36;
            int y = 7;

            foreach (string line in lines)
            {
                Console.SetCursorPosition(x, y);
                Console.ForegroundColor = ConsoleColor.White;

                Console.WriteLine("\t" + line);

                y++;
            }
        }
        #endregion
    }
